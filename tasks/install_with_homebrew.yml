---
- name: Check brew binary exists
  stat:
    path: "{{ pyenv_brew_path }}/brew"
  register: brew_st
  when: pyenv_brew_path is defined

- name: Fail if brew binary doesn't exist
  fail:
    msg: "brew not found in {{ pyenv_brew_path }}"
  when: pyenv_brew_path is defined and not brew_st.stat.exists

- name: Get brew info on pyenv package
  command: "brew info pyenv --json"
  register: brew_info
  changed_when: false

- name: Set required pyenv version
  set_fact:
    pyenv_required_version: "{{ pyenv_version | regex_replace('^v(.*)$', '\\1') }}"

- name: Parse brew info output
  set_fact:
    brew_pyenv_info: "{{ brew_info.stdout | from_json | first }}"
  when: brew_info.rc == 0

- name: Check if pyenv needs to be upgraded
  set_fact:
    brew_pyenv_update: "{{ brew_pyenv_info.linked_keg is version(pyenv_required_version, '<') }}"
  when: brew_pyenv_info is defined and 'linked_keg' in brew_pyenv_info

- name: Install pyenv with Homebrew
  homebrew:
    name: pyenv
    path: "{{ pyenv_brew_path | default(omit) }}"
    state: present
    update_homebrew: false
  when: brew_pyenv_update is not defined or not brew_pyenv_update

- name: Update pyenv with Homebrew and update Homebrew itself
  homebrew:
    name: pyenv
    path: "{{ pyenv_brew_path | default(omit) }}"
    state: latest # noqa 403
    update_homebrew: true
  when: brew_pyenv_update is defined and brew_pyenv_update

# - name: Make sure pyenv is linked
#   homebrew:
#     name: pyenv
#     path: "{{ pyenv_brew_path | default(omit) }}"
#     state: linked

- name: Install pyenv-virtualenv with Homebrew
  homebrew:
    name: pyenv-virtualenv
    path: "{{ pyenv_brew_path | default(omit) }}"

- name: Install pyenv-virtualenvwrapper with Homebrew
  homebrew:
    name: pyenv-virtualenvwrapper
    path: "{{ pyenv_brew_path | default(omit) }}"
  when: pyenv_virtualenvwrapper|bool
